{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","cnt","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","className","title","scroll","href","this","size","logo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSASeA,EAPA,kBACX,6BACI,qCACA,+ECKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,WAC9C,4CCOOC,EAXC,SAAAN,GAAK,OACjB,6BACMA,EAAMO,MAAQP,EAAMQ,SAAW,oCAAWR,EAAMO,KAAjB,KAA0BP,EAAMQ,SAC/DR,EAAMS,aAAe,0CAAiBT,EAAMS,aAC5CT,EAAMU,UAAY,6CAAoBV,EAAMU,UAC5CV,EAAMW,aAAe,2CAAkBX,EAAMW,aAC7CX,EAAMY,KAAO,mCAAUZ,EAAMY,KAC7BZ,EAAMa,OAAS,+BAAMb,EAAMa,S,OCD/BC,EAAU,mCA4FDC,E,2MAzFbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbJ,WAAOI,G,EAETf,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,MAC9Bf,EAAUU,EAAEG,OAAOC,SAASd,QAAQe,MAH/B,SAIYC,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DC,EAA7D,kBAA8EM,EAA9E,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMPpB,GAAQC,EACV,EAAKoB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBvB,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKI,IAAIvB,QAClBE,SAAUiB,EAAKE,KAAKnB,SACpBC,YAAagB,EAAKK,QAAQ,GAAGrB,YAC7BE,MAAO,KAGT,EAAKe,SAAS,CACZnB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbJ,MAAO,uBAtBA,4C,8HA2BX,OACE,6BACE,yBAAKoB,UAAU,oBACnB,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAcC,MAAM,0BAA0BC,QAAM,GAClE,kBAAC,aAAD,KACI,uBAAGC,KAAK,oDAAR,YACA,uBAAGA,KAAK,6CAAR,YAGR,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACI,uBAAGE,KAAK,oDAAR,YACA,uBAAGA,KAAK,6CAAR,cAMR,yBAAKH,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAM/B,WAAYmC,KAAKnC,aACvB,kBAAC,EAAD,CACEO,YAAa4B,KAAKrB,MAAMP,YACxBC,SAAU2B,KAAKrB,MAAMN,SACrBH,KAAM8B,KAAKrB,MAAMT,KACjBC,QAAS6B,KAAKrB,MAAMR,QACpBG,YAAa0B,KAAKrB,MAAML,YACxBE,MAAOwB,KAAKrB,MAAMH,aAO9B,kBAAC,SAAD,CAAQyB,KAAK,QACX,kBAAC,gBAAD,CAAenC,KAAK,OAAOoC,KAAK,qBAC5B,kBAAC,iBAAD,KACE,6DACA,2D,GAjFEC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a0535149.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1>Klima</h1>\r\n        <p>Finn ut temperatur, forhold og litt andre ting</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"By..\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Land..\"/>\r\n        <button>SÃ¸k</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div>\r\n        { props.city && props.country && <p>Sted: { props.city }, {props.country }</p> }\r\n        { props.temperature && <p>Temperatur: { props.temperature }</p>}\r\n        { props.humidity && <p>Luftfuktighet: { props.humidity }</p>}\r\n        { props.description && <p>Beskrivelse: { props.description }</p>}\r\n        { props.cnt && <p>Day: { props.cnt }</p>}\r\n        { props.error && <p> { props.error }</p>}\r\n    </div>\r\n)\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\nimport { Layout, Header, Navigation, Drawer, Footer, FooterSection, FooterDropDownSection, FooterLinkList } from 'react-mdl';\r\n\r\n/*import { tsUndefinedKeyword } from '@babel/types';\r\nhttps://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric */\r\nconst API_KEY = \"c4284a294c0c58b3dcc66882ce5da683\"\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`api.openweathermap.org/data/2.5/forecast/daily?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Fyll ut feltene :)\"\r\n      });\r\n    }\r\n }\r\n  render() {\r\n    return ( \r\n      <div>\r\n        <div className=\"demo-big-content\">\r\n    <Layout>\r\n        <Header className=\"header-color\"title=\"React Klima API handler\" scroll>\r\n            <Navigation>\r\n                <a href=\"https://www.linkedin.com/in/espen-thorsen-frank/\">LinkedIn</a>\r\n                <a href=\"https://github.com/Thusj?tab=repositories\">Github</a>\r\n            </Navigation>\r\n        </Header>\r\n        <Drawer title=\"Klima\">\r\n            <Navigation>\r\n                <a href=\"https://www.linkedin.com/in/espen-thorsen-frank/\">LinkedIn</a>\r\n                <a href=\"https://github.com/Thusj?tab=repositories\">Github</a>\r\n            </Navigation>\r\n        </Drawer>\r\n    </Layout>\r\n    \r\n      </div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-7 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-xs-4 form-container\">                \r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather \r\n                    temperature={this.state.temperature} \r\n                    humidity={this.state.humidity}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer size=\"mini\">\r\n          <FooterSection type=\"left\" logo=\"Just a react test\">\r\n              <FooterLinkList>\r\n                <h7>dont know what to put here :)</h7>\r\n                <h8>Just testing footer</h8>\r\n              </FooterLinkList>\r\n            </FooterSection>\r\n          </Footer>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}